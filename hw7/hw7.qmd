---
title: Homework 7 - Creating a resume database
author: (your name goes here!)
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document is used to demonstrate SQL queries and analyze the tables and relations in this database that orgainizees people, their roles, and thier skills.

GITHUB URL:  <your URL goes here!>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description


This document is used to demonstrate SQL queries and analyze the tables and relations in this database that orgainizees people, their roles, and thier skills.

## Crows-foot diagram

```{mermaid}
%%| echo: false
erDiagram
    people ||--o{ skills : have
    people }|..|{ roles : have
    people{
        int id PK
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_info
        date date_joined
    }
    skills {
        int id PK
        string name
        string description
        string tag
        string url
        string time_commitment

    }
    roles{
        int id PK
        string roles_name
        int sort_priority

    }
```

## Examples of data in the database

The people table stores information about individuals, including their unique identifier, names, contact details, LinkedIn profiles, headshot URLs, Discord handles, brief biographies, and the date they joined. The skills table contains details about various skills, such as their names, descriptions, associated tags, URLs, and time commitments. Meanwhile, the roles table includes roles' unique identifiers, names, and sorting priorities. Relationships are established between the people and skills tables, as well as between the people and roles tables. The entire people table comprises ten entries, each representing an individual with specific attributes. Similarly, the skills table encompasses nine entries, and the roles table contains six entries, each with corresponding attributes.

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select skills_name as skills, tag as tags, description as descriptions from skills
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
#| echo: false
#| eval: true
sql = f"""
select  people_first_name, people_last_name, email from people
order by people_last_name;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```


### List skill names of Person 1

```{python}
#| echo: false
#| eval: true
sql = f"""
select b.skills_name
from  people_skills a
left join  skills b using (skills_id)
left join people c using (people_id) 

where c.people_id = 1;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```

### List people names with Skill 6

```{python}
#| echo: false
#| eval: true
sql = f"""
select c.people_first_name, c.people_last_name
from  people_skills a
left join  skills b using (skills_id)
left join people c using (people_id) 

where b.skills_id = 6;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true
sql = f"""
select c.people_first_name, c.people_last_name
from  people_roles a
left join  roles b using (roles_id)
left join people c using (people_id) 

where b.roles_name = 'DEVELOPER';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true
sql = f"""
select c.email
from  people_skills a
right join  skills b using (skills_id)
right join people c using (people_id) 

where c.people_id = 4;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```

### List names and tags of unused skills

```{python}
#| echo: false
#| eval: true
sql = f"""
select *
from  people_skills a
right join  skills b using (skills_id)
right join people c using (people_id) 

#where c.people_id = 4;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Add code to list roles table here
```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true
sql = f"""
select c.people_first_name, c.people_last_name, d.skills_name
from  people_roles a,
left join people c using (people_id)
left join  roles b using (roles_id)
left join people_skills e using (people_skills_id)
left join skills d using (skills_id)

where b.roles_name = 'BOSS';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
## Add code to list roles table here
```

### List ids and names of unused roles


## Reflection

This assignment showed me how relational algebra concepts, like selections and joins, connect to SQL queries. Relational algebra is like the foundation, and SQL is the practical tool we use to work with databases. Understanding these basic ideas makes it easier to write effective SQL queries for tasks like getting specific data or combining information from different tables. It's like having a handy toolkit for managing databases. The selections are like are almost one to one with each other.
